import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.orm.hibernate6.HibernateTransactionManager;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Query;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;

public class UserServiceTest {
    private ApplicationContext context;
    private EntityManagerFactory entityManagerFactory;
    private HibernateTransactionManager transactionManager;

    @BeforeEach
    public void setUp() {
        // Load Spring context from applicationContext.xml
        context = new ClassPathXmlApplicationContext("applicationContext.xml");
        entityManagerFactory = context.getBean(EntityManagerFactory.class);
        transactionManager = context.getBean(HibernateTransactionManager.class);
    }

    @Test
    public void testNativeQueryWithTransaction() {
        // Create transaction definition
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setPropagationBehavior(DefaultTransactionDefinition.PROPAGATION_REQUIRED);
        
        // Start transaction
        TransactionStatus status = transactionManager.getTransaction(def);
        EntityManager entityManager = entityManagerFactory.createEntityManager();

        try {
            // Begin the transaction
            entityManager.getTransaction().begin();

            // Example native query
            Query nativeQuery = entityManager.createNativeQuery(
                "SELECT * FROM users WHERE active = :activeStatus");
            nativeQuery.setParameter("activeStatus", true);
            
            @SuppressWarnings("unchecked")
            List<Object[]> results = nativeQuery.getResultList();

            // Process results
            assertNotNull(results);
            
            // Commit transaction
            entityManager.getTransaction().commit();
            transactionManager.commit(status);
        } catch (Exception e) {
            // Rollback in case of error
            if (entityManager.getTransaction().isActive()) {
                entityManager.getTransaction().rollback();
            }
            transactionManager.rollback(status);
            fail("Test failed with exception: " + e.getMessage());
        } finally {
            // Close EntityManager
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
    }
}
