<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-dependency-plugin</artifactId>
  <version>3.6.0</version>
  <executions>
    <execution>
      <id>copy-dependencies</id>
      <phase>package</phase>
      <goals>
        <goal>copy-dependencies</goal>
      </goals>
      <configuration>
        <outputDirectory>${project.build.directory}/libs</outputDirectory>
        <includeScope>runtime</includeScope>
      </configuration>
    </execution>
  </executions>
</plugin>

java -cp target/classes:target/libs/* com.example.YourMainClass
-----------------

Map<String, Object> properties = new HashMap<>();
properties.put("jakarta.xml.bind.context.factory", "org.glassfish.jaxb.runtime.v2.ContextFactory");
JAXBContext context = JAXBContext.newInstance(new Class[]{TodoServiceImpl.class}, properties);
-------------------
<dependency>
    <groupId>org.glassfish.hk2</groupId>
    <artifactId>osgiresourcelocator</artifactId>
    <version>1.0.1</version>
</dependency>
<!-- MOXy -->
<dependency>
    <groupId>org.eclipse.persistence</groupId>
    <artifactId>org.eclipse.persistence.moxy</artifactId>
    <version>3.0.2</version> <!-- or 4.x if you're using Jakarta EE 10+ -->
</dependency>

<!-- EclipseLink Core (required by MOXy) -->
<dependency>
    <groupId>org.eclipse.persistence</groupId>
    <artifactId>org.eclipse.persistence.core</artifactId>
    <version>3.0.2</version>
</dependency>


<dependency>
    <groupId>jakarta.xml.bind</groupId>
    <artifactId>jakarta.xml.bind-api</artifactId>
    <version>4.0.0</version>
</dependency>
<dependency>
    <groupId>org.glassfish.jaxb</groupId>
    <artifactId>jaxb-runtime</artifactId>
    <version>4.0.3</version>
</dependency>


jboss-deployment-structure.xml
<jboss-deployment-structure>
    <deployment>
        <dependencies>
            <module name="custom.jakarta.xml.bind.impl"/>
        </dependencies>
    </deployment>
</jboss-deployment-structure>
----

module.xml
<?xml version="1.0" encoding="UTF-8"?>
<module xmlns="urn:jboss:module:1.9" name="custom.jakarta.xml.bind.impl">
    <resources>
        <resource-root path="jakarta.xml.bind-api-4.0.0.jar"/>
        <resource-root path="jakarta.activation-api-2.1.1.jar"/>
        <resource-root path="jaxb-runtime-4.0.3.jar"/>
        <resource-root path="jaxb-core-4.0.3.jar"/>
    </resources>
    <dependencies>
        <module name="java.base"/>
    </dependencies>
</module>

----

package com.example.client;

import java.util.HashMap;
import java.util.Map;

import com.example.service.TodoServiceImpl;

import jakarta.xml.bind.JAXBContext;

public class Client2 {

	
	public static void main(String[] args) throws Exception {
		Map<String, Object> properties = new HashMap<>();
        // Add any specific properties if needed
        JAXBContext context = JAXBContext.newInstance(new Class[]{TodoServiceImpl.class}, properties);
        System.out.println("JAXBContext created: " + context);
        
    }

}
-------------------
<module xmlns="urn:jboss:module:1.9" name="org.glassfish.hk2.osgiresourcelocator">
    <resources>
        <resource-root path="osgi-resource-locator-3.0.4.jar"/>
    </resources>
    <dependencies>
        <module name="javax.api"/>
        <module name="org.glassfish.hk2.api"/> <!-- If required -->
    </dependencies>


</module>
-----------------

import javax.net.ssl.*;
import java.io.IOException;
import java.net.InetAddress;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;

public class TLSDebugClient {

    public static void main(String[] args) {
        String host = "your-jboss-hostname"; // e.g., "localhost"
        int port = 8443; // or your JBoss HTTPS port

        try {
            SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();
            try (SSLSocket socket = (SSLSocket) factory.createSocket(host, port)) {

                // Enable all supported protocols (including TLS 1.2, TLS 1.3)
                socket.setEnabledProtocols(socket.getSupportedProtocols());

                // Start handshake to initiate SSL/TLS
                socket.startHandshake();

                // Print session info
                SSLSession session = socket.getSession();
                System.out.println("Connected to: " + session.getPeerHost());
                System.out.println("Protocol: " + session.getProtocol());
                System.out.println("Cipher suite: " + session.getCipherSuite());

                // Print certificates
                Certificate[] certs = session.getPeerCertificates();
                for (int i = 0; i < certs.length; i++) {
                    System.out.println("\nCertificate " + (i + 1) + ":");
                    if (certs[i] instanceof X509Certificate) {
                        X509Certificate x509 = (X509Certificate) certs[i];
                        System.out.println("  Subject: " + x509.getSubjectDN());
                        System.out.println("  Issuer: " + x509.getIssuerDN());
                        System.out.println("  Valid From: " + x509.getNotBefore());
                        System.out.println("  Valid Until: " + x509.getNotAfter());
                        System.out.println("  Serial Number: " + x509.getSerialNumber());
                    } else {
                        System.out.println("  Certificate Type: " + certs[i].getType());
                    }
                }

                // Print supported protocols
                System.out.println("\nSupported Protocols:");
                for (String protocol : socket.getSupportedProtocols()) {
                    System.out.println("  " + protocol);
                }

                // Print enabled protocols
                System.out.println("\nEnabled Protocols:");
                for (String protocol : socket.getEnabledProtocols()) {
                    System.out.println("  " + protocol);
                }

            }
        } catch (SSLHandshakeException e) {
            System.err.println("SSL Handshake failed: " + e.getMessage());
        } catch (IOException e) {
            System.err.println("Connection error: " + e.getMessage());
        }
    }
}


-------
Check TLS Configuration: Use the JBoss CLI to inspect the HTTPS listener’s SSL context (assuming port 8443 is the default HTTPS listener):
./bin/jboss-cli.sh --connect
/subsystem=undertow/server=default-server/https-listener=https:read-resource(recursive=true)

Look for the security-realm or ssl-context attribute. If using Elytron, check the SSL context:
/subsystem=elytron/server-ssl-context=httpsSSC:read-resource



/subsystem=elytron/server-ssl-context=httpsSSC:write-attribute(name=cipher-suite,value="TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256")
/subsystem=elytron/server-ssl-context=httpsSSC:write-attribute(name=protocols,value=["TLSv1.2","TLSv1.3"])
:reload

openssl s_client -connect localhost:8443

Inspect Certificate: Use OpenSSL to view the certificate:
bash
openssl s_client -connect localhost:8443 -showcerts

openssl s_client -connect your-jboss-hostname:8443 -tls1_2
-------------------------

import javax.net.ssl.*;
import java.net.Socket;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;
import java.security.cert.Certificate;
import java.util.Arrays;

public class TlsInspector {

    public static void main(String[] args) throws Exception {
        String host = "your-jboss-hostname"; // e.g., "localhost"
        int port = 8443; // Change if using a different HTTPS port

        // TrustManager that trusts all certificates (⚠️ only for debugging)
        TrustManager[] trustAll = new TrustManager[] {
            new X509TrustManager() {
                public void checkClientTrusted(X509Certificate[] chain, String authType) {}
                public void checkServerTrusted(X509Certificate[] chain, String authType) {}
                public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }
            }
        };

        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, trustAll, new SecureRandom());
        SSLSocketFactory socketFactory = sslContext.getSocketFactory();

        try (SSLSocket socket = (SSLSocket) socketFactory.createSocket(host, port)) {

            // Enable all supported protocols (e.g., TLS 1.2, 1.3)
            String[] supported = socket.getSupportedProtocols();
            socket.setEnabledProtocols(supported);

            System.out.println("Trying TLS protocols: " + Arrays.toString(supported));

            // Start the SSL/TLS handshake
            socket.startHandshake();

            SSLSession session = socket.getSession();

            System.out.println("✅ Handshake successful");
            System.out.println("Connected to: " + session.getPeerHost());
            System.out.println("Protocol: " + session.getProtocol());
            System.out.println("Cipher suite: " + session.getCipherSuite());

            Certificate[] certs = session.getPeerCertificates();
            for (int i = 0; i < certs.length; i++) {
                if (certs[i] instanceof X509Certificate cert) {
                    System.out.println("\nCertificate " + (i + 1) + ":");
                    System.out.println("  Subject: " + cert.getSubjectDN());
                    System.out.println("  Issuer: " + cert.getIssuerDN());
                    System.out.println("  Valid From: " + cert.getNotBefore());
                    System.out.println("  Valid Until: " + cert.getNotAfter());
                    System.out.println("  Serial Number: " + cert.getSerialNumber());
                }
            }

        } catch (SSLHandshakeException e) {
            System.err.println("❌ SSL Handshake failed: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("❌ Error: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

--------------

import javax.net.ssl.*;
import java.net.Socket;

public class MinimalTlsTest {
    public static void main(String[] args) throws Exception {
        SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();
        try (SSLSocket socket = (SSLSocket) factory.createSocket("your-jboss-hostname", 8443)) {
            socket.setEnabledProtocols(new String[] {"TLSv1.2", "TLSv1.3"});
            socket.startHandshake();
            System.out.println("✅ TLS handshake succeeded using: " + socket.getSession().getProtocol());
        } catch (Exception e) {
            System.err.println("❌ TLS handshake failed: " + e);
            e.printStackTrace();
        }
    }
}

-----

import java.io.*;
import java.net.Socket;

public class JBossHttpClient {
    public static void main(String[] args) {
        String host = "localhost";
        int port = 8080;

        try (Socket socket = new Socket(host, port)) {
            // Send a basic HTTP GET request
            PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
            writer.println("GET / HTTP/1.1");
            writer.println("Host: " + host);
            writer.println("Connection: close");
            writer.println(); // Blank line ends headers

            // Read and print the response
            BufferedReader reader = new BufferedReader(
                new InputStreamReader(socket.getInputStream())
            );

            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }

        } catch (IOException e) {
            System.err.println("❌ Failed to connect: " + e.getMessage());
            e.printStackTrace();
        }
    }
}


System.setProperty("jakarta.xml.bind.context.factory", "org.eclipse.persistence.jaxb.JAXBContextFactory

Map<String, Object> properties = new HashMap<>();
properties.put("jakarta.xml.bind.context.factory", "org.eclipse.persistence.jaxb.JAXBContextFactory");
JAXBContext context = JAXBContext.newInstance(MyClass.class, properties);


Map<String, Object> properties = new HashMap<>();
// Add MOXy-specific properties if needed
JAXBContext context = JAXBContextFactory.createContext(new Class[] { MyClass.class }, properties);


<jboss-deployment-structure>
    <deployment>
        <exclude-subsystems>
            <subsystem name="jaxb" />
        </exclude-subsystems>
        <exclusions>
            <module name="org.glassfish.jaxb" />
        </exclusions>
        <dependencies>
            <module name="org.eclipse.persistence.moxy" services="import"/>
        </dependencies>
    </deployment>
</jboss-deployment-structure>

mvn dependency:tree | grep osgi-resource-locator

_--------
<build>
  <plugins>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-shade-plugin</artifactId>
      <version>3.4.1</version>
      <executions>
        <execution>
          <phase>package</phase>
          <goals><goal>shade</goal></goals>
          <configuration>
            <transformers>
              <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                <mainClass>com.example.App</mainClass>
              </transformer>
            </transformers>
          </configuration>
        </execution>
      </executions>
    </plugin>
  </plugins>
</build>
