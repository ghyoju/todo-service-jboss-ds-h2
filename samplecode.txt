import javax.net.ssl.*;
import java.io.IOException;
import java.net.InetAddress;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;

public class TLSDebugClient {

    public static void main(String[] args) {
        String host = "your-jboss-hostname"; // e.g., "localhost"
        int port = 8443; // or your JBoss HTTPS port

        try {
            SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();
            try (SSLSocket socket = (SSLSocket) factory.createSocket(host, port)) {

                // Enable all supported protocols (including TLS 1.2, TLS 1.3)
                socket.setEnabledProtocols(socket.getSupportedProtocols());

                // Start handshake to initiate SSL/TLS
                socket.startHandshake();

                // Print session info
                SSLSession session = socket.getSession();
                System.out.println("Connected to: " + session.getPeerHost());
                System.out.println("Protocol: " + session.getProtocol());
                System.out.println("Cipher suite: " + session.getCipherSuite());

                // Print certificates
                Certificate[] certs = session.getPeerCertificates();
                for (int i = 0; i < certs.length; i++) {
                    System.out.println("\nCertificate " + (i + 1) + ":");
                    if (certs[i] instanceof X509Certificate) {
                        X509Certificate x509 = (X509Certificate) certs[i];
                        System.out.println("  Subject: " + x509.getSubjectDN());
                        System.out.println("  Issuer: " + x509.getIssuerDN());
                        System.out.println("  Valid From: " + x509.getNotBefore());
                        System.out.println("  Valid Until: " + x509.getNotAfter());
                        System.out.println("  Serial Number: " + x509.getSerialNumber());
                    } else {
                        System.out.println("  Certificate Type: " + certs[i].getType());
                    }
                }

                // Print supported protocols
                System.out.println("\nSupported Protocols:");
                for (String protocol : socket.getSupportedProtocols()) {
                    System.out.println("  " + protocol);
                }

                // Print enabled protocols
                System.out.println("\nEnabled Protocols:");
                for (String protocol : socket.getEnabledProtocols()) {
                    System.out.println("  " + protocol);
                }

            }
        } catch (SSLHandshakeException e) {
            System.err.println("SSL Handshake failed: " + e.getMessage());
        } catch (IOException e) {
            System.err.println("Connection error: " + e.getMessage());
        }
    }
}


-------
Check TLS Configuration: Use the JBoss CLI to inspect the HTTPS listenerâ€™s SSL context (assuming port 8443 is the default HTTPS listener):
./bin/jboss-cli.sh --connect
/subsystem=undertow/server=default-server/https-listener=https:read-resource(recursive=true)

Look for the security-realm or ssl-context attribute. If using Elytron, check the SSL context:
/subsystem=elytron/server-ssl-context=httpsSSC:read-resource



/subsystem=elytron/server-ssl-context=httpsSSC:write-attribute(name=cipher-suite,value="TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256")
/subsystem=elytron/server-ssl-context=httpsSSC:write-attribute(name=protocols,value=["TLSv1.2","TLSv1.3"])
:reload

openssl s_client -connect localhost:8443



Inspect Certificate: Use OpenSSL to view the certificate:
bash
openssl s_client -connect localhost:8443 -showcerts
