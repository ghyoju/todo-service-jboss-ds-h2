java 21, jboss eap 8, x509certificate handshake step by step in detail with configuration, standalone.xml and java code




Configuring an X509Certificate-based SSL/TLS handshake in JBoss EAP 8 with Java 21 involves setting up a secure HTTPS connector, creating and managing keystores and truststores, and writing Java code to handle client certificate authentication. This step-by-step guide provides detailed instructions for configuring the standalone.xml file, setting up certificates, and implementing Java code for the handshake process. The configuration focuses on enabling two-way SSL/TLS (mutual authentication), where both the server and client present certificates during the handshake.

Prerequisites
JBoss EAP 8: Installed and running. Ensure the server is configured with the standalone.xml profile.
Java 21: Installed and set as the default JDK (set JAVA_HOME and update PATH).
Keytool: Available in the Java 21 JDK for generating and managing certificates.
Basic Understanding: Familiarity with SSL/TLS, X509 certificates, and JBoss EAP configuration.
Access: Permissions to modify JBoss EAP configuration files (e.g., standalone.xml) and server directories.
Step-by-Step Configuration
Step 1: Generate Certificates and Keystores
To enable two-way SSL/TLS, you need a server keystore (for the server’s certificate), a server truststore (to trust client certificates), a client keystore (for the client’s certificate), and a client truststore (to trust the server’s certificate).

Create Server Keystore and Certificate Generate a self-signed server certificate and store it in a keystore. For production, use a certificate signed by a trusted Certificate Authority (CA).
bash

Copy
keytool -genkeypair -alias server -keyalg RSA -keysize 2048 -validity 365 -keystore server.keystore -dname "CN=localhost, OU=IT, O=Example, L=City, S=State, C=US" -keypass secret -storepass secret
Output: Creates server.keystore in the current directory.
Parameters:
-alias server: Alias for the certificate.
-keyalg RSA: Algorithm for the key.
-keysize 2048: Key size for security.
-validity 365: Certificate validity in days.
-keystore server.keystore: Keystore file.
-dname: Distinguished Name for the certificate.
-keypass and -storepass: Passwords for the key and keystore.
Export Server Certificate Export the server’s public certificate to share with the client.
bash

Copy
keytool -export -keystore server.keystore -alias server -file server.cer -storepass secret
Output: Creates server.cer.
Create Client Keystore and Certificate Generate a client certificate for the client to present during the handshake.
bash

Copy
keytool -genkeypair -alias client -keyalg RSA -keysize 2048 -validity 365 -keystore client.keystore -dname "CN=client, OU=IT, O=Example, L=City, S=State, C=US" -keypass clientpass -storepass clientpass
Output: Creates client.keystore.
Export Client Certificate Export the client’s public certificate to share with the server.
bash

Copy
keytool -export -keystore client.keystore -alias client -file client.cer -storepass clientpass
Output: Creates client.cer.
Create Server Truststore Import the client’s certificate into the server’s truststore to trust the client.
bash

Copy
keytool -import -file client.cer -alias client -keystore server.truststore -storepass secret
Output: Creates server.truststore. Answer yes when prompted to trust the certificate.
Create Client Truststore Import the server’s certificate into the client’s truststore to trust the server.
bash

Copy
keytool -import -file server.cer -alias server -keystore client.truststore -storepass clientpass
Output: Creates client.truststore. Answer yes when prompted.
Move Files to JBoss Configuration Directory Copy the keystore and truststore files to the JBoss EAP configuration directory (e.g., EAP_HOME/standalone/configuration).
bash

Copy
mv server.keystore server.truststore client.keystore client.truststore EAP_HOME/standalone/configuration/
Replace EAP_HOME with the path to your JBoss EAP installation (e.g., /opt/jboss-eap-8.0).
Step 2: Configure JBoss EAP 8 (standalone.xml)
Modify the standalone.xml file to enable two-way SSL/TLS using the Elytron subsystem, which is the default security framework in JBoss EAP 8. The configuration includes setting up keystores, key managers, trust managers, and an SSL context for the HTTPS connector.

Open standalone.xml
Locate the file in EAP_HOME/standalone/configuration/standalone.xml and open it in a text editor.

Configure Elytron Subsystem
Add or update the Elytron subsystem configuration to define keystores, key managers, trust managers, and the server SSL context. Add the following under the <subsystem xmlns="urn:jboss:domain:elytron:18.0"> section (adjust the version if necessary):

xml

Copy
<!-- Server Keystore -->
<key-store name="serverKeyStore">
    <credential-reference clear-text="secret"/>
    <implementation type="JKS"/>
    <file path="server.keystore" relative-to="jboss.server.config.dir"/>
</key-store>

<!-- Server Truststore -->
<key-store name="serverTrustStore">
    <credential-reference clear-text="secret"/>
    <implementation type="JKS"/>
    <file path="server.truststore" relative-to="jboss.server.config.dir"/>
</key-store>

<!-- Key Manager -->
<key-manager name="serverKeyManager">
    <key-store name="serverKeyStore"/>
    <credential-reference clear-text="secret"/>
</key-manager>

<!-- Trust Manager -->
<trust-manager name="serverTrustManager">
    <key-store name="serverTrustStore"/>
</trust-manager>

<!-- Server SSL Context for Two-Way SSL -->
<server-ssl-context name="serverSSLContext">
    <key-manager name="serverKeyManager"/>
    <trust-manager name="serverTrustManager"/>
    <need-client-auth>true</need-client-auth>
</server-ssl-context>
Explanation:
key-store: Defines the server keystore and truststore, referencing the files created earlier.
key-manager: Manages the server’s private key from the keystore.
trust-manager: Manages trusted certificates from the truststore.
server-ssl-context: Configures the SSL context for two-way SSL, with need-client-auth=true to require client certificates.
relative-to="jboss.server.config.dir": Points to EAP_HOME/standalone/configuration.
credential-reference: Specifies the keystore/truststore password.
Configure HTTPS Connector
Update the undertow subsystem to use the Elytron SSL context for the HTTPS connector. Add or modify the HTTPS listener under <subsystem xmlns="urn:jboss:domain:undertow:14.0"> (adjust the version if necessary):

xml

Copy
<server name="default-server">
    <http-listener name="default" socket-binding="http" redirect-socket="https"/>
    <https-listener name="https" socket-binding="https" ssl-context="serverSSLContext"/>
    <host name="default-host" alias="localhost">
        <location name="/" handler="welcome-content"/>
    </host>
</server>
Explanation:
https-listener: Defines the HTTPS listener, referencing the serverSSLContext from Elytron.
socket-binding="https": Binds to the HTTPS port (default: 8443).
The HTTP listener redirects to HTTPS for secure access.
Verify Socket Bindings
Ensure the https socket binding is defined in the <socket-binding-group> section (it’s usually present by default):

xml

Copy
<socket-binding name="https" port="${jboss.https.port:8443}"/>
Save and Validate
Save the standalone.xml file and validate its XML syntax. You can use a tool like xmllint or the JBoss CLI to check for errors:

bash

Copy
xmllint --noout EAP_HOME/standalone/configuration/standalone.xml
Step 3: Start JBoss EAP
Start or restart the JBoss EAP server to apply the configuration.

bash

Copy
EAP_HOME/bin/standalone.sh
Check the server logs (EAP_HOME/standalone/log/server.log) for errors related to SSL configuration.
Access the server at https://localhost:8443. You may see a certificate warning in the browser due to the self-signed certificate.
Step 4: Java Code for Client-Side Handshake
Write a Java client to connect to the JBoss EAP server, present the client certificate, and handle the server’s certificate during the SSL/TLS handshake. The client uses the client.keystore and client.truststore created earlier.

Java Client Code
Create a Java class SSLClient.java to perform an HTTPS request with mutual authentication:

java

Copy
import javax.net.ssl.*;
import java.io.*;
import java.net.URL;
import java.security.cert.X509Certificate;

public class SSLClient {
    public static void main(String[] args) throws Exception {
        // Configure SSL context with client keystore and truststore
        String keystorePath = "path/to/client.keystore"; // Update with actual path
        String truststorePath = "path/to/client.truststore"; // Update with actual path
        String keystorePass = "clientpass";
        String truststorePass = "clientpass";

        // Load keystore
        System.setProperty("javax.net.ssl.keyStore", keystorePath);
        System.setProperty("javax.net.ssl.keyStorePassword", keystorePass);
        System.setProperty("javax.net.ssl.keyStoreType", "JKS");

        // Load truststore
        System.setProperty("javax.net.ssl.trustStore", truststorePath);
        System.setProperty("javax.net.ssl.trustStorePassword", truststorePass);
        System.setProperty("javax.net.ssl.trustStoreType", "JKS");

        // Create HTTPS connection
        URL url = new URL("https://localhost:8443");
        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();

        // Optional: Set hostname verifier to bypass hostname mismatch (for testing)
        conn.setHostnameVerifier((hostname, session) -> true);

        // Connect and read response
        conn.setRequestMethod("GET");
        int responseCode = conn.getResponseCode();
        System.out.println("Response Code: " + responseCode);

        // Read server certificate
        SSLSession session = conn.getSession();
        java.security.cert.Certificate[] serverCerts = session.getPeerCertificates();
        for (java.security.cert.Certificate cert : serverCerts) {
            if (cert instanceof X509Certificate) {
                X509Certificate x509Cert = (X509Certificate) cert;
                System.out.println("Server Certificate: " + x509Cert.getSubjectDN());
            }
        }

        // Read response content
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        }

        conn.disconnect();
    }
}
Explanation:
Keystore/Truststore Configuration: Sets system properties to load the client’s keystore (client.keystore) and truststore (client.truststore).
HTTPS Connection: Opens a connection to https://localhost:8443.
Hostname Verifier: Bypasses hostname verification for testing with self-signed certificates (remove in production).
Certificate Inspection: Retrieves and prints the server’s certificate details.
Response Handling: Reads and prints the server’s response.
Compile and Run
Compile and run the client, ensuring the keystore and truststore files are accessible:

bash

Copy
javac SSLClient.java
java -Djavax.net.debug=ssl:handshake SSLClient
The -Djavax.net.debug=ssl:handshake flag enables detailed SSL handshake logging for debugging.
Update keystorePath and truststorePath with the absolute paths to client.keystore and client.truststore.
Step 5: Server-Side Java Code (Optional)
If your application needs to retrieve and process the client’s certificate (e.g., for authentication), you can write a servlet or REST endpoint to extract the X509Certificate from the request.

Servlet Example
Create a servlet ClientCertServlet.java to retrieve the client certificate:

java

Copy
import java.io.IOException;
import java.io.PrintWriter;
import java.security.cert.X509Certificate;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/client-cert")
public class ClientCertServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        resp.setContentType("text/plain");
        PrintWriter out = resp.getWriter();

        // Retrieve client certificates
        X509Certificate[] certs = (X509Certificate[]) req.getAttribute("javax.servlet.request.X509Certificate");

        if (certs != null && certs.length > 0) {
            for (int i = 0; i < certs.length; i++) {
                out.println("Client Certificate [" + i + "]: " + certs[i].getSubjectDN());
            }
        } else {
            out.println("No client certificate provided or not an HTTPS request.");
        }
    }
}
Explanation:
Certificate Retrieval: Uses req.getAttribute("javax.servlet.request.X509Certificate") to get the client’s certificate chain.
Response: Prints the certificate’s subject DN (Distinguished Name) or a message if no certificate is provided.
Deployment: Deploy this servlet in a WAR file to JBoss EAP (e.g., place it in EAP_HOME/standalone/deployments).
Deploy and Test

Package the servlet in a WAR file and deploy it to JBoss EAP.
Access the endpoint at https://localhost:8443/your-app/client-cert using the Java client or a browser configured with the client certificate.
Ensure the client presents the certificate during the handshake.
Step 6: Verify the SSL/TLS Handshake
Check Server Logs
Open EAP_HOME/standalone/log/server.log and look for SSL-related messages, such as successful handshakes or errors (e.g., javax.net.ssl.SSLHandshakeException).
Common issues include incorrect passwords, missing certificates, or untrusted certificates.
Debug Handshake
Enable SSL debugging on the server by adding the following to EAP_HOME/bin/standalone.conf:
bash

Copy
JAVA_OPTS="$JAVA_OPTS -Djavax.net.debug=ssl:handshake"
Restart the server and observe detailed handshake logs in server.log.
Test with Client
Run the SSLClient Java program and verify that:
The response code is 200 (OK).
The server’s certificate details are printed.
The response content (if any) is displayed.
If using the servlet, access https://localhost:8443/your-app/client-cert and verify the client certificate details in the response.
Browser Testing (Optional)
Import client.keystore into a browser (e.g., Firefox or Chrome) to test the HTTPS endpoint.
Configure the browser to present the client certificate when prompted.
Access https://localhost:8443 and verify the handshake completes successfully.
Step 7: Troubleshooting Common Issues
Handshake Failure (javax.net.ssl.SSLHandshakeException)
Cause: Mismatched certificates, incorrect keystore/truststore passwords, or untrusted certificates.
Solution:
Verify keystore and truststore passwords in standalone.xml.
Ensure the client’s certificate is in the server’s truststore and vice versa.
Check the certificate’s validity and alias.
No Client Certificate Provided
Cause: Client did not present a certificate, or need-client-auth is not set to true.
Solution:
Confirm <need-client-auth>true</need-client-auth> in the server-ssl-context.
Ensure the client is configured to send the certificate (e.g., correct keystore settings).
Hostname Mismatch
Cause: The certificate’s CN (Common Name) does not match the server’s hostname.
Solution:
Use a certificate with a CN matching the server’s hostname (e.g., localhost or a domain).
For testing, bypass hostname verification in the client (as shown in the code).
Weak Ciphers or Protocols
Cause: Java 21 or JBoss EAP 8 may disable outdated protocols (e.g., TLSv1) or weak ciphers.
Solution:
Update the server-ssl-context to specify supported protocols:
xml

Copy
<server-ssl-context name="serverSSLContext" protocols="TLSv1.2 TLSv1.3" ...>
Check Java’s security properties ($JAVA_HOME/conf/security/java.security) for disabled algorithms.
Port 8443 Not Accessible
Cause: Firewall or incorrect socket binding.
Solution:
Ensure port 8443 is open (firewall-cmd --add-port=8443/tcp on Linux).
Verify the https socket binding in standalone.xml.
Step 8: Production Considerations
Use CA-Signed Certificates
Replace self-signed certificates with CA-signed certificates for production.
Obtain certificates from a trusted CA (e.g., Let’s Encrypt, DigiCert) and import them into the keystore.
Secure Passwords
Store keystore and truststore passwords in a JBoss EAP credential store instead of plain text:
xml

Copy
<credential-reference store="credStore" alias="keystore-pass"/>
Configure the credential store using the JBoss CLI.
Enable TLSv1.3
Java 21 and JBoss EAP 8 support TLSv1.3, which is more secure. Explicitly enable it in the server-ssl-context:
xml

Copy
<server-ssl-context name="serverSSLContext" protocols="TLSv1.3" ...>
Automate Certificate Renewal
Use tools like ACME (Let’s Encrypt) to automate certificate issuance and renewal. JBoss EAP 8 supports ACME integration via Elytron (see should-renew-certificate CLI commands).
Monitor Logs
Regularly monitor server.log for SSL handshake errors or certificate expiration warnings.
Summary of Key Files and Configurations
Keystores/Truststores:
server.keystore: Server’s certificate and private key.
server.truststore: Trusts the client’s certificate.
client.keystore: Client’s certificate and private key.
client.truststore: Trusts the server’s certificate.
standalone.xml:
Elytron: Configures keystores, key managers, trust managers, and SSL context.
Undertow: Defines the HTTPS listener with the SSL context.
Java Code:
Client: Connects to the server, presents the client certificate, and verifies the server’s certificate.
Server (optional): Servlet to retrieve and process the client’s certificate.
Example Handshake Flow
Client Initiates Handshake:
Sends a ClientHello message with supported TLS versions (e.g., TLSv1.3) and ciphers.
Loads client.keystore to present its certificate.
Server Responds:
Sends a ServerHello, selecting the TLS version and cipher.
Presents its certificate from server.keystore.
Requests the client’s certificate (need-client-auth=true).
Client Sends Certificate:
Sends its certificate from client.keystore.
Verifies the server’s certificate against client.truststore.
Server Verifies Client:
Verifies the client’s certificate against server.truststore.
Completes the handshake if certificates are trusted.
Secure Communication:
Both parties establish a secure session and exchange encrypted data.
References
Red Hat JBoss EAP 8 Documentation: Configuring SSL/TLS
JBoss Community: SSL Configuration HOW-TO
MiddlewareMagic: SSL Configuration with CLI and Java Client
Mastertheboss: Configuring SSL/HTTPS on WildFly
This guide provides a comprehensive, step-by-step approach to configuring X509Certificate-based SSL/TLS handshakes in JBoss EAP 8 with Java 21. Let me know if you need further clarification or additional details!




25 web pages








How can Grok help?


DeepSearch


Think

Grok 3
